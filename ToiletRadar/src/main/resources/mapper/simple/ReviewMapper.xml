<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.springboot.mapper.simple.ReviewMapper">
    <resultMap id="BaseResultMap" type="cn.springboot.model.simple.Review">
        <result column="pk_id" jdbcType="BIGINT" property="pkId"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="score" jdbcType="TINYINT" property="score"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime"/>
        <result column="delete_status" jdbcType="BIT" property="deleteStatus"/>
        <result column="like_count" jdbcType="INTEGER" property="likeCount"/>
        <result column="fr_toilet" jdbcType="VARCHAR" property="frToilet"/>
        <result column="fr_account" jdbcType="VARCHAR" property="frAccount"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        pk_id, content, score, create_time, modify_time, delete_status, like_count, fr_toilet,
        fr_account
    </sql>
    <select id="selectByExample" parameterType="cn.springboot.model.simple.ReviewExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from review
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByExample" parameterType="cn.springboot.model.simple.ReviewExample">
        delete from review
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.springboot.model.simple.Review">
        insert into review (pk_id, content, score,
        create_time, modify_time, delete_status,
        like_count, fr_toilet, fr_account
        )
        values (#{pkId,jdbcType=BIGINT}, #{content,jdbcType=VARCHAR}, #{score,jdbcType=TINYINT},
        #{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP}, #{deleteStatus,jdbcType=BIT},
        #{likeCount,jdbcType=INTEGER}, #{frToilet,jdbcType=VARCHAR}, #{frAccount,jdbcType=VARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="cn.springboot.model.simple.Review">
        insert into review
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="pkId != null">
                pk_id,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="score != null">
                score,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="modifyTime != null">
                modify_time,
            </if>
            <if test="deleteStatus != null">
                delete_status,
            </if>
            <if test="likeCount != null">
                like_count,
            </if>
            <if test="frToilet != null">
                fr_toilet,
            </if>
            <if test="frAccount != null">
                fr_account,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="pkId != null">
                #{pkId,jdbcType=BIGINT},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="score != null">
                #{score,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyTime != null">
                #{modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleteStatus != null">
                #{deleteStatus,jdbcType=BIT},
            </if>
            <if test="likeCount != null">
                #{likeCount,jdbcType=INTEGER},
            </if>
            <if test="frToilet != null">
                #{frToilet,jdbcType=VARCHAR},
            </if>
            <if test="frAccount != null">
                #{frAccount,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.springboot.model.simple.ReviewExample" resultType="java.lang.Long">
        select count(*) from review
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update review
        <set>
            <if test="record.pkId != null">
                pk_id = #{record.pkId,jdbcType=BIGINT},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=VARCHAR},
            </if>
            <if test="record.score != null">
                score = #{record.score,jdbcType=TINYINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.modifyTime != null">
                modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.deleteStatus != null">
                delete_status = #{record.deleteStatus,jdbcType=BIT},
            </if>
            <if test="record.likeCount != null">
                like_count = #{record.likeCount,jdbcType=INTEGER},
            </if>
            <if test="record.frToilet != null">
                fr_toilet = #{record.frToilet,jdbcType=VARCHAR},
            </if>
            <if test="record.frAccount != null">
                fr_account = #{record.frAccount,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update review
        set pk_id = #{record.pkId,jdbcType=BIGINT},
        content = #{record.content,jdbcType=VARCHAR},
        score = #{record.score,jdbcType=TINYINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
        delete_status = #{record.deleteStatus,jdbcType=BIT},
        like_count = #{record.likeCount,jdbcType=INTEGER},
        fr_toilet = #{record.frToilet,jdbcType=VARCHAR},
        fr_account = #{record.frAccount,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <!--以下是新增加的方法-->
    <!-- 展示某厕所所有评论-->
    <select id="showCmtListByFr_toilet" resultMap="BaseResultMap" parameterType="string">
        select * from review where fr_toilet = ${frToilet}
    </select>
    <!-- 个人给厕所评分-->
    <update id="updateLikeNumber">
        update review set like_count = ${likeCount} where fr_toilet = ${frToilet} and fr_account = #{frAccount}
    </update>
    <!--获取点赞数-->
    <select id="getLikeNumber" resultType="int" parameterType="string">
        SELECT count(*) from (SELECT fr_toilet,fr_account from review where like_count = 1 and fr_toilet = ${frToilet}
        GROUP BY fr_account) as a
    </select>
    <!--给厕所打分-->
    <update id="updateScore">
        update review set score = ${score} where fr_toilet = ${frToilet} and fr_account = #{frAccount}
    </update>
    <!--查找是否存在某用户已经对某厕所进行了评价-->
    <select id="isExistCmt" resultType="Integer">
        select * from review where fr_toilet = ${frToilet} and fr_account = #{frAccount}
    </select>
    <!--检查用户是否对某厕所进行了打分操作-->
    <select id="isPublishScore" resultType="Integer">
        select score from review where fr_toilet = ${frToilet} and fr_account = #{frAccount}
    </select>
    <!--计算某个厕所的综合平均分-->
    <select id="getAverageScore" parameterType="string" resultType="float">
        SELECT avg(a) from (SELECT avg(score) as a from review where fr_toilet = ${frToilet} GROUP BY fr_account) as b
    </select>

    <!--  查询所有评论信息按评论的厕所排序  -->
    <select id="findAllList" resultMap="BaseResultMap">
        select * from review order by fr_toilet asc
    </select>

    <!-- 修改评论的删除状态-->
    <update id="deleteById">
        update review set delete_status = ${status} where pk_id = #{pkId}
    </update>
</mapper>